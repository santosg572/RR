Beginning_Data_Science_R_Manas_C02

* instalación de R
* herramientas de desarrollo
* elementos del lenguaje de programación R, como los operadores y los tipos de datos. 
* sintaxis de diferentes estructuras, como las sentencias condicionales y los bucles, junto con las funciones.
* carga de paquetes R desde Comprehensive R Archive Network (CRAN).
* ejecución del código R fuera de la consola R mediante Rscript.

2.1 Installing R


* Hay dos formas de instalar R: descargar un binario de R y compilar R desde el código fuente. 

$ sudo apt-get install r-base r-base-dev

Similarly, on Mac OS X we can install R using ports.

$ sudo port install R

* Cada versión tiene un nombre asignado. A excepción de las versiones principales, las versiones de R suelen ser compatibles con versiones anteriores en cuanto a su funcionalidad. En este libro, utilizamos la versión 3.1.0 de R.

2.1.1 Development Tools

* Alternativamente, podemos escribir el código R en un editor de texto externo e importar o generar el código en la aplicación de línea de comandos. 

* En Windows, R se instala como una aplicación de interfaz gráfica de usuario (GUI) (Fig. 2.2) con un conjunto de herramientas de desarrollo, como un editor integrado. También existe una aplicación GUI similar llamada R.app para Mac OS X. Sin embargo, estas aplicaciones son bastante básicas en comparación con los entornos de desarrollo integrados (IDE) para otros lenguajes de programación.

* Recientemente, hay muchos IDE independientes disponibles para R. Uno de los IDE más potentes es RStudio1.

2.2 R Programming Language

* R es un lenguaje interpretado; las expresiones especificadas en un programa R se ejecutan línea por línea de manera similar a otros lenguajes interpretados, 

* R tiene tipos dinámicos, lo que significa que infiere los tipos de datos de las variables en función del contexto. No necesitamos declarar las variables por separado.


2.2.1 Operators

* R proporciona operadores aritméticos como suma (+), resta (-), multiplicación (*), división (/) y exponenciación (ˆ). Ingresamos la expresión 3 + 4 en la consola R. 

> 3 + 4
[1] 7

* Usamos un operador de asignación para asignar el valor de una expresión a una variable. R tiene dos operadores de asignación: el operador de asignación convencional = que está presente en la mayoría de los lenguajes de programación, y las flechas <- y -> que son específicas de R.

* La expresión x = 5 asigna el valor 5 a x; la expresión x <- 5 y 5 -> x tienen exactamente el mismo efecto.

* Podemos crear expresiones utilizando variables. Por ejemplo, asignamos el valor 5 a la variable x y evaluamos el cuadrado de x utilizando el operador de exponenciación (ˆ).


> x = 5
> xˆ2
[1] 25

2.2.2 Printing Values

* Al ingresar una expresión en la consola R, se evalúa la expresión y luego se imprime su valor. Internamente, R llama a la función print() con el valor de la expresión. También podemos llamar a print() explícitamente. Esto es útil cuando queremos imprimir valores para variables en un script.

> print(3 + 4)
[1] 7

* La función print() imprime el valor de la expresión y una nueva línea. Sin embargo, no es sencillo imprimir varios valores utilizando print(), por ejemplo, si queremos imprimir el nombre de la variable junto con el valor. Necesitamos imprimir la salida de la función paste() que concatena dos cadenas con un espacio.

> print(paste(’the sum is’, 3 + 4))
[1] "the sum is 7"

* Existe una función más simple llamada cat() que puede imprimir una lista de valores, por lo que no necesitamos llamar a paste(). Como la función cat() no imprime el carácter de nueva línea, debemos especificarlo manualmente.


> cat(’the sum is’, 3 + 4, ’\n’)
the sum is 7

2.2.3 Basic Data Types

* Existen dos tipos de datos: los escalares, que representan datos de un solo valor, y los compuestos, que representan conjuntos de datos escalares. Aquí analizamos los tipos de datos escalares en R; en el capítulo 3 analizaremos los tipos de datos compuestos, como los vectores y los marcos de datos.


* R ofrece múltiples formatos de tipos de datos escalares, como numéricos, enteros, de caracteres, lógicos y complejos. El tipo de datos numéricos se utiliza para representar números de punto flotante, mientras que los datos enteros se utilizan para representar únicamente valores enteros. Podemos convertir variables de numéricas a enteras utilizando la función as.integer().

> as.integer(2.56)
[1] 2

* De manera predeterminada, R también utiliza el tipo de datos numéricos para valores enteros. Identificamos el tipo de datos de una variable mediante la función class().

> x = 5
> class(x)
[1] "numeric"

* También podemos comprobar si una variable es un número entero utilizando la función is.integer(). Estas funciones, as.datatype() e is.datatype(), existen para todos los tipos de datos mencionados anteriormente.


* El tipo de datos de caracteres se utiliza para representar cadenas. A diferencia de C o Java, R no distingue entre el tipo de datos de un solo carácter char y el tipo de datos de cadena de varios caracteres. Además, podemos utilizar comillas simples y dobles para encerrar cadenas; en este libro, utilizamos principalmente comillas simples.

> s1 = "string"
> s1
[1] "string"
> s2 = ’also a string’
> s2
[1] "also a string"

* Realizamos conversiones entre variables de caracteres y numéricas utilizando las funciones as.character() y as.numeric().

> as.character(2.5)
[1] "2.5"10
2 Overview of the R Programming Language
> as.numeric(’2.5’)
[1] 2.5

* Al igual que otros lenguajes de programación, R también tiene funciones estándar de procesamiento de cadenas, como calcular la longitud de una cadena, encontrar subcadenas y dividir una cadena en función de un carácter. La biblioteca stringr también proporciona un conjunto de funciones más consistentes y fáciles de usar para el procesamiento de cadenas.

* El tipo de datos lógico representa los valores booleanos: verdadero y falso. R utiliza dos constantes TRUE y FALSE para representar valores booleanos. Estos valores también se representan mediante las constantes abreviadas T y F. En este libro, utilizamos estas constantes abreviadas para representar valores booleanos. R proporciona los operadores booleanos estándar: y (&), o (|), no (!) junto con operadores relacionales como igual a (==), menor que (<) y mayor que (>) que operan sobre variables numéricas y devuelven valores booleanos.

* R también proporciona soporte para representar variables complejas que contienen un componente real e imaginario.


> z = 2 + 3i

* Podemos realizar operaciones directamente sobre las variables complejas.

> zˆ2
[1] -5+12i

2.2.4 Control Structures

* R proporciona estructuras de control como ramificaciones condicionales (if-else) y bucles. La sintaxis de if-else es similar a la de la mayoría de los demás lenguajes de programación:

> if (x > 0) {
+
y = ’positive’
+ } else {
+
y = ’negative or zero’
+ }

* En este caso, a y se le asignará la cadena ‘positivo’ si x > 0 y ‘negativo o cero’ en caso contrario.

* Hay muchas otras formas de escribir la misma declaración en R. En primer lugar, podemos usar if-else para devolver un valor.


> y = if (x > 0) ’positive’ else ’negative or zero’

* También podemos escribir la misma expresión usando la función ifelse(), donde el primer argumento es la condición booleana, y el segundo y tercer argumento son los valores respectivos para que la condición sea verdadera y falsa.

> y = ifelse(x > 0, ’positive’, ’negative or zero’)

* Una extensión de la función ifelse() a múltiples valores es la función switch().

* R también proporciona múltiples estructuras de bucle. El bucle más simple es el bucle while, en el que especificamos la condición booleana junto con un conjunto de pasos que se ejecutan cada vez hasta que se cumple la condición. La sintaxis del bucle while no es diferente de la de C. Usamos el bucle while para calcular la suma de los cuadrados de 1 a 10.


> total = 0
> i = 1
> while (i <= 10) {
+
total = total + iˆ2
+
i = i + 1
+ }
> total
[1] 385

Otra construcción de bucle útil es el bucle de repetición, en el que no hay ninguna condición booleana. El bucle continúa hasta que se cumple una condición de interrupción; conceptualmente, el bucle de repetición es similar a while (T). Calculamos la misma suma de cuadrados de 1 a 10 utilizando un bucle de repetición.

> total = 0
> i = 1
> repeat {
+
total = total + iˆ2
+
if (i == 10) break
+
i = i + 1
+ }
> total
[1] 385

* R también tiene un bucle for poderoso que es más similar al bucle for de Python o Javascript que al bucle for de C. En este bucle, iteramos sobre un vector de elementos. Usamos el operador in para acceder a un elemento de este vector a la vez. Hablaremos de vectores con más detalle en el Capítulo 3; por ahora, construimos un vector de elementos del 1 al 10 como 1:10. Calculamos la misma suma de cuadrados del 1 al 10 usando un bucle for a continuación.

> total = 0
> for (i in 1:10) {
+
total = total + iˆ2

+ }
> total
[1] 38512
2 Overview of the R Programming Language

2.2.5 Functions

* R ofrece un gran soporte para la creación de funciones. 

* La sintaxis para llamar a una función en R es similar a la de la mayoría de los demás lenguajes de programación. Por ejemplo, utilizamos la función sum() para calcular la suma de un vector de números. Esta función la proporciona el paquete básico.

> sum(1:10)
[1] 55

* R tiene una sintaxis especial para definir funciones. Al igual que en otros lenguajes de programación, especificamos el nombre de la función, los parámetros y el cuerpo de las instrucciones que contienen un valor de retorno. La diferencia es que creamos una función utilizando la palabra clave function y la asignamos a una variable. Más adelante veremos el motivo de esto.

* Creamos una función llamada avg() para calcular el valor promedio de un vector de números. Esta es una implementación de la función mean() del paquete base. Usamos la función length() que calcula la cantidad de elementos o la longitud de un vector.

> avg = function(x) {
+
return(sum(x)/length(x))
+ }
> avg(1:10)
[1] 5.5

* No necesitamos especificar el valor de retorno explícitamente en la función; la última expresión evaluada se considera automáticamente como el valor de retorno. Para las funciones de una línea, no necesitamos encerrar el cuerpo de la función entre llaves. Podemos reescribir la misma función como:

> avg = function(x) sum(x)/length(x)
> avg(1:10)
[1] 5.5

* En R, las funciones se tratan como objetos de primera clase similares a otros tipos de datos, como numéricos, de caracteres o vectoriales. Esta es una propiedad fundamental de los lenguajes de programación funcional. Aunque el paradigma de la programación funcional siempre tuvo una comunidad de nicho sólida, se ha convertido en algo común con la reciente adopción generalizada de lenguajes como Scala, Clojure, OCaml,

* El nombre literal de la función, en nuestro caso avg, corresponde al objeto de la función, mientras que la llamada a la función avg(1:10) corresponde a un valor que devuelve la función cuando se evalúa con la entrada 1:10. También podemos asignar la función suma a otra variable my.function. Llamar a my.function() tiene el mismo efecto que llamar a sum().

> my.function = sum2.3 Packages
13
> my.function(1:10)
[1] 55

* Además, también podemos pasar una función como argumento a otras funciones de orden superior. Por ejemplo, creamos una función sum.f() que calcula la suma de un vector después de que se le haya aplicado la función f(). Una función de orden superior de este tipo debería funcionar para cualquier función f(); en el momento de definir sum.f(), no sabemos cuál será f().

> sum.f = function(x, f) sum(f(x))

* Calculamos la suma de los cuadrados de los números entre 1 y 10 usando sum.f() a continuación. Como f(), pasamos la función de cuadrado.

> sum.f(1:10, function(x) xˆ2)
[1] 385

* Creamos la función function(x) xˆ2 sin asignarle ningún nombre antes de llamarla. Estas funciones se conocen como funciones anónimas. R ofrece un gran soporte para la programación funcional. El uso de este paradigma tiene ventajas, como un código más conciso y claro.

2.3 Packages

* Una colección autónoma de funciones R se denomina paquete. Esto resulta especialmente útil cuando se proporciona este paquete a otros usuarios. Un paquete R también puede contener conjuntos de datos junto con las dependencias. Es sencillo crear paquetes para nuestras propias funciones R [1]. En esta sección, veremos cómo instalar y cargar otros paquetes.

* Cuando iniciamos R, el paquete base ya está cargado de forma predeterminada. Este paquete contiene funciones básicas para operaciones aritméticas, de entrada/salida y otras tareas sencillas. El verdadero poder de R reside en su biblioteca de paquetes. Hay miles de paquetes disponibles en CRAN que cubren una gran cantidad de métodos de análisis de datos. Podemos instalar estos paquetes desde R utilizando la función install.packages(). Esta función descarga los archivos fuente de un paquete desde un sitio web espejo de CRAN, crea el paquete y lo almacena en un repositorio local. El usuario no necesita hacer mucho para instalar un paquete, excepto elegir el espejo.

* Como ejemplo, instalamos el paquete stringr que se muestra a continuación. La función install.packages() proporciona una lista de servidores mirror ubicados en todo el mundo. Elegimos la primera opción: 0-Cloud.

> install.packages(’stringr’)
Installing package into /Users/mpathak/Library/R/3.1/library
(as lib is unspecified)
--- Please select a CRAN mirror for use in this session ---
CRAN mirror
1: 0-Cloud
2: Argentina (La Plata)14

* Después de iniciar R, usamos la función library() para cargar los paquetes que necesitamos en nuestro espacio de trabajo. Cargamos el paquete stringr a continuación.


> library(stringr)

* Una alternativa a library() es la función require(), que tiene la misma sintaxis. En este libro utilizamos varios paquetes. Para cada paquete, solo utilizamos la función library() para cargarlo suponiendo que ya se ha instalado. Si ese paquete aún no se ha instalado, solicitamos al lector que lo instale utilizando la función install.packages().

2.3.1 R Help System

* Otra ventaja de usar R es que podemos acceder a la documentación directamente desde la consola de R. Para cualquier función, podemos buscar la documentación usando la función help(). Buscamos la documentación de la función cat() a continuación.


> help(cat)


Alternativamente, también podemos buscar la documentación utilizando el operador ?.



> ?cat

Junto con la documentación, también podemos ver el uso de ejemplo de una función usando la función example().


> example(cat)

2.4 Running R Code

* Esto tiene el beneficio adicional de almacenar nuestro código R para uso futuro. Como ejemplo, creamos el archivo test.r con el código para sumar los cuadrados de los números del 1 al 10.

# loop.r
total = 0
for (i in 1:10) {
total = total + iˆ2
}
print(total)

We use the source() function to run the code from loop.r in the R console.

Usamos la función source() para ejecutar el código de loop.r en la consola R.


> source(’loop.r’)
[1] 385


* Necesitamos usar print() explícitamente para imprimir valores cuando usamos source(). También podemos ejecutar el código R sin iniciar la consola R usando la herramienta Rscript. Pasamos el nombre del archivo que contiene el código fuente como argumento de la línea de comandos a Rscript.

$ Rscript loop.r
[1] 385

Reference

1. Leisch, F. (2009). Creating R packages: A tutorial.
http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf.










